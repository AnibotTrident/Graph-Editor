{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anish\\\\Desktop\\\\Anibot\\\\code\\\\DEV\\\\Graph Editor\\\\frontend\\\\src\\\\App.js\";\nimport React, { useState, useRef } from 'react';\nimport './App.css';\nconst Node = ({\n  id,\n  label,\n  position,\n  onDragStart,\n  onClick,\n  isSelected\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `node ${isSelected ? 'selected' : ''}`,\n    style: {\n      left: `${position.x}px`,\n      top: `${position.y}px`,\n      position: 'absolute'\n    },\n    onMouseDown: e => onDragStart(e, id),\n    onClick: () => onClick(id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, label);\n};\nconst Edge = ({\n  start,\n  end\n}) => {\n  const calculateLine = (start, end) => {\n    const dx = end.x - start.x;\n    const dy = end.y - start.y;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    const angle = Math.atan2(dy, dx) * (180 / Math.PI);\n    return {\n      width: length,\n      transform: `rotate(${angle}deg)`,\n      left: start.x,\n      top: start.y\n    };\n  };\n  const lineStyle = calculateLine(start, end);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'absolute',\n      width: `${lineStyle.width}px`,\n      height: '2px',\n      backgroundColor: '#000',\n      transformOrigin: '0 0',\n      transform: lineStyle.transform,\n      left: `${lineStyle.left}px`,\n      top: `${lineStyle.top}px`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  });\n};\nconst App = () => {\n  const [nodes, setNodes] = useState([\n    //   { id: 1, label: 'Node 1', position: { x: 100, y: 100 } },\n    // { id: 2, label: 'Node 2', position: { x: 300, y: 100 } },\n  ]);\n  const [edges, setEdges] = useState([]);\n  const [draggingNode, setDraggingNode] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [addingEdge, setAddingEdge] = useState(false);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n  const nodeRadius = 40; // Approximate radius of a node for edge positioning\n\n  const handleNodeDragStart = (e, id) => {\n    setDraggingNode(id);\n    const node = nodes.find(node => node.id === id);\n    if (node) {\n      setDragOffset({\n        x: e.clientX - node.position.x,\n        y: e.clientY - node.position.y\n      });\n    }\n  };\n  const handleNodeDragMove = e => {\n    if (draggingNode !== null) {\n      const newX = e.clientX - dragOffset.x;\n      const newY = e.clientY - dragOffset.y;\n      setNodes(prevNodes => prevNodes.map(node => node.id === draggingNode ? {\n        ...node,\n        position: {\n          x: newX,\n          y: newY\n        }\n      } : node));\n    }\n  };\n  const handleNodeDragEnd = () => {\n    setDraggingNode(null);\n  };\n  const addNode = () => {\n    const newNode = {\n      id: nodes.length + 1,\n      label: `Node ${nodes.length + 1}`,\n      position: {\n        x: Math.random() * 500,\n        y: Math.random() * 500\n      }\n    };\n    setNodes([...nodes, newNode]);\n  };\n  const handleAddEdgeClick = () => {\n    setAddingEdge(true);\n    setSelectedNodes([]);\n  };\n  const handleNodeClick = id => {\n    if (addingEdge) {\n      if (selectedNodes.length < 2) {\n        setSelectedNodes(prevSelected => [...prevSelected, id]);\n      }\n      if (selectedNodes.length === 1) {\n        const startNode = nodes.find(node => node.id === selectedNodes[0]);\n        const endNode = nodes.find(node => node.id === id);\n        if (startNode && endNode) {\n          setEdges(prevEdges => [...prevEdges, {\n            start: {\n              x: startNode.position.x + nodeRadius,\n              y: startNode.position.y + nodeRadius\n            },\n            end: {\n              x: endNode.position.x + nodeRadius,\n              y: endNode.position.y + nodeRadius\n            }\n          }]);\n        }\n        setAddingEdge(false); // Exit edge-adding mode\n        setSelectedNodes([]);\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph-editor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addNode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, \"Add Node\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleAddEdgeClick,\n    className: addingEdge ? 'active' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, \"Add Edge\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph-container\",\n    onMouseMove: handleNodeDragMove,\n    onMouseUp: handleNodeDragEnd,\n    onMouseLeave: handleNodeDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, edges.map((edge, index) => /*#__PURE__*/React.createElement(Edge, {\n    key: index,\n    start: edge.start,\n    end: edge.end,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  })), nodes.map(node => /*#__PURE__*/React.createElement(Node, {\n    key: node.id,\n    id: node.id,\n    label: node.label,\n    position: node.position,\n    onDragStart: handleNodeDragStart,\n    onClick: handleNodeClick,\n    isSelected: selectedNodes.includes(node.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }))));\n};\nexport default App;","map":{"version":3,"names":["React","useState","useRef","Node","id","label","position","onDragStart","onClick","isSelected","createElement","className","style","left","x","top","y","onMouseDown","e","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Edge","start","end","calculateLine","dx","dy","length","Math","sqrt","angle","atan2","PI","width","transform","lineStyle","height","backgroundColor","transformOrigin","App","nodes","setNodes","edges","setEdges","draggingNode","setDraggingNode","dragOffset","setDragOffset","addingEdge","setAddingEdge","selectedNodes","setSelectedNodes","nodeRadius","handleNodeDragStart","node","find","clientX","clientY","handleNodeDragMove","newX","newY","prevNodes","map","handleNodeDragEnd","addNode","newNode","random","handleAddEdgeClick","handleNodeClick","prevSelected","startNode","endNode","prevEdges","onMouseMove","onMouseUp","onMouseLeave","edge","index","key","includes"],"sources":["C:/Users/anish/Desktop/Anibot/code/DEV/Graph Editor/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './App.css';\r\n\r\nconst Node = ({ id, label, position, onDragStart, onClick, isSelected }) => {\r\n  return (\r\n    <div\r\n      className={`node ${isSelected ? 'selected' : ''}`}\r\n      style={{\r\n        left: `${position.x}px`,\r\n        top: `${position.y}px`,\r\n        position: 'absolute',\r\n      }}\r\n      onMouseDown={(e) => onDragStart(e, id)}\r\n      onClick={() => onClick(id)}\r\n    >\r\n      {label}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Edge = ({ start, end }) => {\r\n  const calculateLine = (start, end) => {\r\n    const dx = end.x - start.x;\r\n    const dy = end.y - start.y;\r\n    const length = Math.sqrt(dx * dx + dy * dy);\r\n    const angle = Math.atan2(dy, dx) * (180 / Math.PI);\r\n\r\n    return {\r\n      width: length,\r\n      transform: `rotate(${angle}deg)`,\r\n      left: start.x,\r\n      top: start.y,\r\n    };\r\n  };\r\n\r\n  const lineStyle = calculateLine(start, end);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        width: `${lineStyle.width}px`,\r\n        height: '2px',\r\n        backgroundColor: '#000',\r\n        transformOrigin: '0 0',\r\n        transform: lineStyle.transform,\r\n        left: `${lineStyle.left}px`,\r\n        top: `${lineStyle.top}px`,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  const [nodes, setNodes] = useState([\r\n //   { id: 1, label: 'Node 1', position: { x: 100, y: 100 } },\r\n   // { id: 2, label: 'Node 2', position: { x: 300, y: 100 } },\r\n  ]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [draggingNode, setDraggingNode] = useState(null);\r\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\r\n  const [addingEdge, setAddingEdge] = useState(false);\r\n  const [selectedNodes, setSelectedNodes] = useState([]);\r\n\r\n  const nodeRadius = 40; // Approximate radius of a node for edge positioning\r\n\r\n  const handleNodeDragStart = (e, id) => {\r\n    setDraggingNode(id);\r\n    const node = nodes.find((node) => node.id === id);\r\n    if (node) {\r\n      setDragOffset({\r\n        x: e.clientX - node.position.x,\r\n        y: e.clientY - node.position.y,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleNodeDragMove = (e) => {\r\n    if (draggingNode !== null) {\r\n      const newX = e.clientX - dragOffset.x;\r\n      const newY = e.clientY - dragOffset.y;\r\n      setNodes((prevNodes) =>\r\n        prevNodes.map((node) =>\r\n          node.id === draggingNode ? { ...node, position: { x: newX, y: newY } } : node\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleNodeDragEnd = () => {\r\n    setDraggingNode(null);\r\n  };\r\n\r\n  const addNode = () => {\r\n    const newNode = {\r\n      id: nodes.length + 1,\r\n      label: `Node ${nodes.length + 1}`,\r\n      position: { x: Math.random() * 500, y: Math.random() * 500 },\r\n    };\r\n    setNodes([...nodes, newNode]);\r\n  };\r\n\r\n  const handleAddEdgeClick = () => {\r\n    setAddingEdge(true);\r\n    setSelectedNodes([]);\r\n  };\r\n\r\n  const handleNodeClick = (id) => {\r\n    if (addingEdge) {\r\n      if (selectedNodes.length < 2) {\r\n        setSelectedNodes((prevSelected) => [...prevSelected, id]);\r\n      }\r\n      if (selectedNodes.length === 1) {\r\n        const startNode = nodes.find((node) => node.id === selectedNodes[0]);\r\n        const endNode = nodes.find((node) => node.id === id);\r\n        if (startNode && endNode) {\r\n          setEdges((prevEdges) => [\r\n            ...prevEdges,\r\n            {\r\n              start: {\r\n                x: startNode.position.x + nodeRadius,\r\n                y: startNode.position.y + nodeRadius,\r\n              },\r\n              end: {\r\n                x: endNode.position.x + nodeRadius,\r\n                y: endNode.position.y + nodeRadius,\r\n              },\r\n            },\r\n          ]);\r\n        }\r\n        setAddingEdge(false); // Exit edge-adding mode\r\n        setSelectedNodes([]);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-editor\">\r\n      <div className=\"button-container\">\r\n        <button onClick={addNode}>Add Node</button>\r\n        <button onClick={handleAddEdgeClick} className={addingEdge ? 'active' : ''}>\r\n          Add Edge\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"graph-container\"\r\n        onMouseMove={handleNodeDragMove}\r\n        onMouseUp={handleNodeDragEnd}\r\n        onMouseLeave={handleNodeDragEnd}\r\n      >\r\n        {edges.map((edge, index) => (\r\n          <Edge key={index} start={edge.start} end={edge.end} />\r\n        ))}\r\n        {nodes.map((node) => (\r\n          <Node\r\n            key={node.id}\r\n            id={node.id}\r\n            label={node.label}\r\n            position={node.position}\r\n            onDragStart={handleNodeDragStart}\r\n            onClick={handleNodeClick}\r\n            isSelected={selectedNodes.includes(node.id)}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}