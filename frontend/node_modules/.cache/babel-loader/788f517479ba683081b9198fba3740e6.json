{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anish\\\\Desktop\\\\Anibot\\\\code\\\\DEV\\\\Graph Editor\\\\frontend\\\\src\\\\App.js\";\nimport React, { useState, useRef } from 'react';\nimport './App.css';\nconst Node = ({\n  id,\n  label,\n  position,\n  onDragStart,\n  onDragMove,\n  onDragEnd\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"node\",\n    style: {\n      left: `${position.x}px`,\n      top: `${position.y}px`,\n      position: 'absolute',\n      backgroundColor: '#4CAF50',\n      color: '#fff',\n      borderRadius: '10px',\n      padding: '10px 20px',\n      cursor: 'move'\n    },\n    onMouseDown: e => onDragStart(e, id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, label);\n};\nconst Edge = ({\n  start,\n  end,\n  onDragStart,\n  onDragMove,\n  onDragEnd,\n  index\n}) => {\n  const calculateLine = (start, end) => {\n    const x1 = start.x;\n    const y1 = start.y;\n    const x2 = end.x;\n    const y2 = end.y;\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    const angle = Math.atan2(dy, dx) * (180 / Math.PI);\n    return {\n      width: length,\n      transform: `rotate(${angle}deg)`,\n      left: x1,\n      top: y1\n    };\n  };\n  const lineStyle = calculateLine(start, end);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'absolute',\n      width: `${lineStyle.width}px`,\n      height: '2px',\n      backgroundColor: '#000',\n      transformOrigin: '0 0',\n      transform: lineStyle.transform,\n      left: `${lineStyle.left}px`,\n      top: `${lineStyle.top}px`,\n      cursor: 'pointer'\n    },\n    onMouseDown: e => onDragStart(e, start, end, index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  });\n};\nconst App = () => {\n  const [nodes, setNodes] = useState([{\n    id: 1,\n    label: 'Node 1',\n    position: {\n      x: 100,\n      y: 100\n    }\n  }, {\n    id: 2,\n    label: 'Node 2',\n    position: {\n      x: 300,\n      y: 100\n    }\n  }]);\n  const [edges, setEdges] = useState([]);\n  const [draggingNode, setDraggingNode] = useState(null);\n  const [draggingEdge, setDraggingEdge] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const graphContainerRef = useRef(null);\n\n  // Start dragging a node\n  const handleNodeDragStart = (e, id) => {\n    setDraggingNode(id);\n    const node = nodes.find(node => node.id === id);\n    if (node) {\n      setDragOffset({\n        x: e.clientX - node.position.x,\n        y: e.clientY - node.position.y\n      });\n    }\n  };\n\n  // Handle dragging a node\n  const handleNodeDragMove = e => {\n    if (draggingNode !== null) {\n      const newX = e.clientX - dragOffset.x;\n      const newY = e.clientY - dragOffset.y;\n      setNodes(prevNodes => prevNodes.map(node => node.id === draggingNode ? {\n        ...node,\n        position: {\n          x: newX,\n          y: newY\n        }\n      } : node));\n    }\n  };\n\n  // Stop dragging a node\n  const handleNodeDragEnd = () => {\n    setDraggingNode(null);\n  };\n\n  // Start dragging an edge\n  const handleEdgeDragStart = (e, startNode, endNode, index) => {\n    setDraggingEdge({\n      startNode,\n      endNode,\n      index\n    });\n    setDragOffset({\n      x: e.clientX - startNode.x,\n      y: e.clientY - startNode.y\n    });\n  };\n\n  // Handle dragging an edge\n  const handleEdgeDragMove = e => {\n    if (draggingEdge) {\n      const {\n        startNode,\n        endNode,\n        index\n      } = draggingEdge;\n      const newStartX = e.clientX - dragOffset.x;\n      const newStartY = e.clientY - dragOffset.y;\n      const newEndX = newStartX + (endNode.x - startNode.x);\n      const newEndY = newStartY + (endNode.y - startNode.y);\n      setEdges(prevEdges => prevEdges.map((edge, idx) => idx === index ? {\n        start: {\n          x: newStartX,\n          y: newStartY\n        },\n        end: {\n          x: newEndX,\n          y: newEndY\n        }\n      } : edge));\n    }\n  };\n\n  // Stop dragging an edge\n  const handleEdgeDragEnd = () => {\n    setDraggingEdge(null);\n  };\n\n  // Add a new node\n  const addNode = () => {\n    const newNode = {\n      id: nodes.length + 1,\n      label: `Node ${nodes.length + 1}`,\n      position: {\n        x: Math.random() * 500,\n        y: Math.random() * 500\n      }\n    };\n    setNodes([...nodes, newNode]);\n  };\n\n  // Add an edge between two nodes\n  const addEdge = (startNodeId, endNodeId) => {\n    const startNode = nodes.find(node => node.id === startNodeId);\n    const endNode = nodes.find(node => node.id === endNodeId);\n    if (startNode && endNode) {\n      setEdges([...edges, {\n        start: startNode.position,\n        end: endNode.position\n      }]);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph-editor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addNode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, \"Add Node\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => addEdge(1, 2),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, \"Add Edge\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph-container\",\n    ref: graphContainerRef,\n    onMouseMove: handleNodeDragMove,\n    onMouseUp: handleNodeDragEnd,\n    onMouseLeave: handleNodeDragEnd // Handle when mouse leaves the container\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, edges.map((edge, index) => /*#__PURE__*/React.createElement(Edge, {\n    key: index,\n    start: edge.start,\n    end: edge.end,\n    onDragStart: handleEdgeDragStart,\n    onDragMove: handleEdgeDragMove,\n    onDragEnd: handleEdgeDragEnd,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  })), nodes.map(node => /*#__PURE__*/React.createElement(Node, {\n    key: node.id,\n    id: node.id,\n    label: node.label,\n    position: node.position,\n    onDragStart: handleNodeDragStart,\n    onDragMove: handleNodeDragMove,\n    onDragEnd: handleNodeDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 11\n    }\n  }))));\n};\nexport default App;","map":{"version":3,"names":["React","useState","useRef","Node","id","label","position","onDragStart","onDragMove","onDragEnd","createElement","className","style","left","x","top","y","backgroundColor","color","borderRadius","padding","cursor","onMouseDown","e","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Edge","start","end","index","calculateLine","x1","y1","x2","y2","dx","dy","length","Math","sqrt","angle","atan2","PI","width","transform","lineStyle","height","transformOrigin","App","nodes","setNodes","edges","setEdges","draggingNode","setDraggingNode","draggingEdge","setDraggingEdge","dragOffset","setDragOffset","graphContainerRef","handleNodeDragStart","node","find","clientX","clientY","handleNodeDragMove","newX","newY","prevNodes","map","handleNodeDragEnd","handleEdgeDragStart","startNode","endNode","handleEdgeDragMove","newStartX","newStartY","newEndX","newEndY","prevEdges","edge","idx","handleEdgeDragEnd","addNode","newNode","random","addEdge","startNodeId","endNodeId","onClick","ref","onMouseMove","onMouseUp","onMouseLeave","key"],"sources":["C:/Users/anish/Desktop/Anibot/code/DEV/Graph Editor/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './App.css';\r\n\r\nconst Node = ({ id, label, position, onDragStart, onDragMove, onDragEnd }) => {\r\n  return (\r\n    <div\r\n      className=\"node\"\r\n      style={{\r\n        left: `${position.x}px`,\r\n        top: `${position.y}px`,\r\n        position: 'absolute',\r\n        backgroundColor: '#4CAF50',\r\n        color: '#fff',\r\n        borderRadius: '10px',\r\n        padding: '10px 20px',\r\n        cursor: 'move',\r\n      }}\r\n      onMouseDown={(e) => onDragStart(e, id)}\r\n    >\r\n      {label}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Edge = ({ start, end, onDragStart, onDragMove, onDragEnd, index }) => {\r\n  const calculateLine = (start, end) => {\r\n    const x1 = start.x;\r\n    const y1 = start.y;\r\n    const x2 = end.x;\r\n    const y2 = end.y;\r\n    const dx = x2 - x1;\r\n    const dy = y2 - y1;\r\n    const length = Math.sqrt(dx * dx + dy * dy);\r\n    const angle = Math.atan2(dy, dx) * (180 / Math.PI);\r\n\r\n    return {\r\n      width: length,\r\n      transform: `rotate(${angle}deg)`,\r\n      left: x1,\r\n      top: y1,\r\n    };\r\n  };\r\n\r\n  const lineStyle = calculateLine(start, end);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        width: `${lineStyle.width}px`,\r\n        height: '2px',\r\n        backgroundColor: '#000',\r\n        transformOrigin: '0 0',\r\n        transform: lineStyle.transform,\r\n        left: `${lineStyle.left}px`,\r\n        top: `${lineStyle.top}px`,\r\n        cursor: 'pointer',\r\n      }}\r\n      onMouseDown={(e) => onDragStart(e, start, end, index)}\r\n    />\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  const [nodes, setNodes] = useState([\r\n    { id: 1, label: 'Node 1', position: { x: 100, y: 100 } },\r\n    { id: 2, label: 'Node 2', position: { x: 300, y: 100 } },\r\n  ]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [draggingNode, setDraggingNode] = useState(null);\r\n  const [draggingEdge, setDraggingEdge] = useState(null);\r\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\r\n\r\n  const graphContainerRef = useRef(null);\r\n\r\n  // Start dragging a node\r\n  const handleNodeDragStart = (e, id) => {\r\n    setDraggingNode(id);\r\n    const node = nodes.find((node) => node.id === id);\r\n    if (node) {\r\n      setDragOffset({\r\n        x: e.clientX - node.position.x,\r\n        y: e.clientY - node.position.y,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handle dragging a node\r\n  const handleNodeDragMove = (e) => {\r\n    if (draggingNode !== null) {\r\n      const newX = e.clientX - dragOffset.x;\r\n      const newY = e.clientY - dragOffset.y;\r\n      setNodes((prevNodes) =>\r\n        prevNodes.map((node) =>\r\n          node.id === draggingNode ? { ...node, position: { x: newX, y: newY } } : node\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  // Stop dragging a node\r\n  const handleNodeDragEnd = () => {\r\n    setDraggingNode(null);\r\n  };\r\n\r\n  // Start dragging an edge\r\n  const handleEdgeDragStart = (e, startNode, endNode, index) => {\r\n    setDraggingEdge({ startNode, endNode, index });\r\n    setDragOffset({\r\n      x: e.clientX - startNode.x,\r\n      y: e.clientY - startNode.y,\r\n    });\r\n  };\r\n\r\n  // Handle dragging an edge\r\n  const handleEdgeDragMove = (e) => {\r\n    if (draggingEdge) {\r\n      const { startNode, endNode, index } = draggingEdge;\r\n      const newStartX = e.clientX - dragOffset.x;\r\n      const newStartY = e.clientY - dragOffset.y;\r\n\r\n      const newEndX = newStartX + (endNode.x - startNode.x);\r\n      const newEndY = newStartY + (endNode.y - startNode.y);\r\n\r\n      setEdges((prevEdges) =>\r\n        prevEdges.map((edge, idx) =>\r\n          idx === index\r\n            ? { start: { x: newStartX, y: newStartY }, end: { x: newEndX, y: newEndY } }\r\n            : edge\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  // Stop dragging an edge\r\n  const handleEdgeDragEnd = () => {\r\n    setDraggingEdge(null);\r\n  };\r\n\r\n  // Add a new node\r\n  const addNode = () => {\r\n    const newNode = {\r\n      id: nodes.length + 1,\r\n      label: `Node ${nodes.length + 1}`,\r\n      position: { x: Math.random() * 500, y: Math.random() * 500 },\r\n    };\r\n    setNodes([...nodes, newNode]);\r\n  };\r\n\r\n  // Add an edge between two nodes\r\n  const addEdge = (startNodeId, endNodeId) => {\r\n    const startNode = nodes.find((node) => node.id === startNodeId);\r\n    const endNode = nodes.find((node) => node.id === endNodeId);\r\n\r\n    if (startNode && endNode) {\r\n      setEdges([...edges, { start: startNode.position, end: endNode.position }]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-editor\">\r\n      <button onClick={addNode}>Add Node</button>\r\n      <button onClick={() => addEdge(1, 2)}>Add Edge</button>\r\n      <div\r\n        className=\"graph-container\"\r\n        ref={graphContainerRef}\r\n        onMouseMove={handleNodeDragMove}\r\n        onMouseUp={handleNodeDragEnd}\r\n        onMouseLeave={handleNodeDragEnd} // Handle when mouse leaves the container\r\n      >\r\n        {edges.map((edge, index) => (\r\n          <Edge\r\n            key={index}\r\n            start={edge.start}\r\n            end={edge.end}\r\n            onDragStart={handleEdgeDragStart}\r\n            onDragMove={handleEdgeDragMove}\r\n            onDragEnd={handleEdgeDragEnd}\r\n            index={index}\r\n          />\r\n        ))}\r\n        {nodes.map((node) => (\r\n          <Node\r\n            key={node.id}\r\n            id={node.id}\r\n            label={node.label}\r\n            position={node.position}\r\n            onDragStart={handleNodeDragStart}\r\n            onDragMove={handleNodeDragMove}\r\n            onDragEnd={handleNodeDragEnd}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAO,WAAW;AAElB,MAAMC,IAAI,GAAGA,CAAC;EAAEC,EAAE;EAAEC,KAAK;EAAEC,QAAQ;EAAEC,WAAW;EAAEC,UAAU;EAAEC;AAAU,CAAC,KAAK;EAC5E,oBACET,KAAA,CAAAU,aAAA;IACEC,SAAS,EAAC,MAAM;IAChBC,KAAK,EAAE;MACLC,IAAI,EAAE,GAAGP,QAAQ,CAACQ,CAAC,IAAI;MACvBC,GAAG,EAAE,GAAGT,QAAQ,CAACU,CAAC,IAAI;MACtBV,QAAQ,EAAE,UAAU;MACpBW,eAAe,EAAE,SAAS;MAC1BC,KAAK,EAAE,MAAM;MACbC,YAAY,EAAE,MAAM;MACpBC,OAAO,EAAE,WAAW;MACpBC,MAAM,EAAE;IACV,CAAE;IACFC,WAAW,EAAGC,CAAC,IAAKhB,WAAW,CAACgB,CAAC,EAAEnB,EAAE,CAAE;IAAAoB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEtCxB,KACE,CAAC;AAEV,CAAC;AAED,MAAMyB,IAAI,GAAGA,CAAC;EAAEC,KAAK;EAAEC,GAAG;EAAEzB,WAAW;EAAEC,UAAU;EAAEC,SAAS;EAAEwB;AAAM,CAAC,KAAK;EAC1E,MAAMC,aAAa,GAAGA,CAACH,KAAK,EAAEC,GAAG,KAAK;IACpC,MAAMG,EAAE,GAAGJ,KAAK,CAACjB,CAAC;IAClB,MAAMsB,EAAE,GAAGL,KAAK,CAACf,CAAC;IAClB,MAAMqB,EAAE,GAAGL,GAAG,CAAClB,CAAC;IAChB,MAAMwB,EAAE,GAAGN,GAAG,CAAChB,CAAC;IAChB,MAAMuB,EAAE,GAAGF,EAAE,GAAGF,EAAE;IAClB,MAAMK,EAAE,GAAGF,EAAE,GAAGF,EAAE;IAClB,MAAMK,MAAM,GAAGC,IAAI,CAACC,IAAI,CAACJ,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;IAC3C,MAAMI,KAAK,GAAGF,IAAI,CAACG,KAAK,CAACL,EAAE,EAAED,EAAE,CAAC,IAAI,GAAG,GAAGG,IAAI,CAACI,EAAE,CAAC;IAElD,OAAO;MACLC,KAAK,EAAEN,MAAM;MACbO,SAAS,EAAE,UAAUJ,KAAK,MAAM;MAChC/B,IAAI,EAAEsB,EAAE;MACRpB,GAAG,EAAEqB;IACP,CAAC;EACH,CAAC;EAED,MAAMa,SAAS,GAAGf,aAAa,CAACH,KAAK,EAAEC,GAAG,CAAC;EAE3C,oBACEhC,KAAA,CAAAU,aAAA;IACEE,KAAK,EAAE;MACLN,QAAQ,EAAE,UAAU;MACpByC,KAAK,EAAE,GAAGE,SAAS,CAACF,KAAK,IAAI;MAC7BG,MAAM,EAAE,KAAK;MACbjC,eAAe,EAAE,MAAM;MACvBkC,eAAe,EAAE,KAAK;MACtBH,SAAS,EAAEC,SAAS,CAACD,SAAS;MAC9BnC,IAAI,EAAE,GAAGoC,SAAS,CAACpC,IAAI,IAAI;MAC3BE,GAAG,EAAE,GAAGkC,SAAS,CAAClC,GAAG,IAAI;MACzBM,MAAM,EAAE;IACV,CAAE;IACFC,WAAW,EAAGC,CAAC,IAAKhB,WAAW,CAACgB,CAAC,EAAEQ,KAAK,EAAEC,GAAG,EAAEC,KAAK,CAAE;IAAAT,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACvD,CAAC;AAEN,CAAC;AAED,MAAMuB,GAAG,GAAGA,CAAA,KAAM;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGrD,QAAQ,CAAC,CACjC;IAAEG,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,QAAQ;IAAEC,QAAQ,EAAE;MAAEQ,CAAC,EAAE,GAAG;MAAEE,CAAC,EAAE;IAAI;EAAE,CAAC,EACxD;IAAEZ,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,QAAQ;IAAEC,QAAQ,EAAE;MAAEQ,CAAC,EAAE,GAAG;MAAEE,CAAC,EAAE;IAAI;EAAE,CAAC,CACzD,CAAC;EACF,MAAM,CAACuC,KAAK,EAAEC,QAAQ,CAAC,GAAGvD,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACwD,YAAY,EAAEC,eAAe,CAAC,GAAGzD,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAAC0D,YAAY,EAAEC,eAAe,CAAC,GAAG3D,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAAC4D,UAAU,EAAEC,aAAa,CAAC,GAAG7D,QAAQ,CAAC;IAAEa,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC,CAAC;EAE5D,MAAM+C,iBAAiB,GAAG7D,MAAM,CAAC,IAAI,CAAC;;EAEtC;EACA,MAAM8D,mBAAmB,GAAGA,CAACzC,CAAC,EAAEnB,EAAE,KAAK;IACrCsD,eAAe,CAACtD,EAAE,CAAC;IACnB,MAAM6D,IAAI,GAAGZ,KAAK,CAACa,IAAI,CAAED,IAAI,IAAKA,IAAI,CAAC7D,EAAE,KAAKA,EAAE,CAAC;IACjD,IAAI6D,IAAI,EAAE;MACRH,aAAa,CAAC;QACZhD,CAAC,EAAES,CAAC,CAAC4C,OAAO,GAAGF,IAAI,CAAC3D,QAAQ,CAACQ,CAAC;QAC9BE,CAAC,EAAEO,CAAC,CAAC6C,OAAO,GAAGH,IAAI,CAAC3D,QAAQ,CAACU;MAC/B,CAAC,CAAC;IACJ;EACF,CAAC;;EAED;EACA,MAAMqD,kBAAkB,GAAI9C,CAAC,IAAK;IAChC,IAAIkC,YAAY,KAAK,IAAI,EAAE;MACzB,MAAMa,IAAI,GAAG/C,CAAC,CAAC4C,OAAO,GAAGN,UAAU,CAAC/C,CAAC;MACrC,MAAMyD,IAAI,GAAGhD,CAAC,CAAC6C,OAAO,GAAGP,UAAU,CAAC7C,CAAC;MACrCsC,QAAQ,CAAEkB,SAAS,IACjBA,SAAS,CAACC,GAAG,CAAER,IAAI,IACjBA,IAAI,CAAC7D,EAAE,KAAKqD,YAAY,GAAG;QAAE,GAAGQ,IAAI;QAAE3D,QAAQ,EAAE;UAAEQ,CAAC,EAAEwD,IAAI;UAAEtD,CAAC,EAAEuD;QAAK;MAAE,CAAC,GAAGN,IAC3E,CACF,CAAC;IACH;EACF,CAAC;;EAED;EACA,MAAMS,iBAAiB,GAAGA,CAAA,KAAM;IAC9BhB,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC;;EAED;EACA,MAAMiB,mBAAmB,GAAGA,CAACpD,CAAC,EAAEqD,SAAS,EAAEC,OAAO,EAAE5C,KAAK,KAAK;IAC5D2B,eAAe,CAAC;MAAEgB,SAAS;MAAEC,OAAO;MAAE5C;IAAM,CAAC,CAAC;IAC9C6B,aAAa,CAAC;MACZhD,CAAC,EAAES,CAAC,CAAC4C,OAAO,GAAGS,SAAS,CAAC9D,CAAC;MAC1BE,CAAC,EAAEO,CAAC,CAAC6C,OAAO,GAAGQ,SAAS,CAAC5D;IAC3B,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAM8D,kBAAkB,GAAIvD,CAAC,IAAK;IAChC,IAAIoC,YAAY,EAAE;MAChB,MAAM;QAAEiB,SAAS;QAAEC,OAAO;QAAE5C;MAAM,CAAC,GAAG0B,YAAY;MAClD,MAAMoB,SAAS,GAAGxD,CAAC,CAAC4C,OAAO,GAAGN,UAAU,CAAC/C,CAAC;MAC1C,MAAMkE,SAAS,GAAGzD,CAAC,CAAC6C,OAAO,GAAGP,UAAU,CAAC7C,CAAC;MAE1C,MAAMiE,OAAO,GAAGF,SAAS,IAAIF,OAAO,CAAC/D,CAAC,GAAG8D,SAAS,CAAC9D,CAAC,CAAC;MACrD,MAAMoE,OAAO,GAAGF,SAAS,IAAIH,OAAO,CAAC7D,CAAC,GAAG4D,SAAS,CAAC5D,CAAC,CAAC;MAErDwC,QAAQ,CAAE2B,SAAS,IACjBA,SAAS,CAACV,GAAG,CAAC,CAACW,IAAI,EAAEC,GAAG,KACtBA,GAAG,KAAKpD,KAAK,GACT;QAAEF,KAAK,EAAE;UAAEjB,CAAC,EAAEiE,SAAS;UAAE/D,CAAC,EAAEgE;QAAU,CAAC;QAAEhD,GAAG,EAAE;UAAElB,CAAC,EAAEmE,OAAO;UAAEjE,CAAC,EAAEkE;QAAQ;MAAE,CAAC,GAC1EE,IACN,CACF,CAAC;IACH;EACF,CAAC;;EAED;EACA,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC9B1B,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC;;EAED;EACA,MAAM2B,OAAO,GAAGA,CAAA,KAAM;IACpB,MAAMC,OAAO,GAAG;MACdpF,EAAE,EAAEiD,KAAK,CAACZ,MAAM,GAAG,CAAC;MACpBpC,KAAK,EAAE,QAAQgD,KAAK,CAACZ,MAAM,GAAG,CAAC,EAAE;MACjCnC,QAAQ,EAAE;QAAEQ,CAAC,EAAE4B,IAAI,CAAC+C,MAAM,CAAC,CAAC,GAAG,GAAG;QAAEzE,CAAC,EAAE0B,IAAI,CAAC+C,MAAM,CAAC,CAAC,GAAG;MAAI;IAC7D,CAAC;IACDnC,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEmC,OAAO,CAAC,CAAC;EAC/B,CAAC;;EAED;EACA,MAAME,OAAO,GAAGA,CAACC,WAAW,EAAEC,SAAS,KAAK;IAC1C,MAAMhB,SAAS,GAAGvB,KAAK,CAACa,IAAI,CAAED,IAAI,IAAKA,IAAI,CAAC7D,EAAE,KAAKuF,WAAW,CAAC;IAC/D,MAAMd,OAAO,GAAGxB,KAAK,CAACa,IAAI,CAAED,IAAI,IAAKA,IAAI,CAAC7D,EAAE,KAAKwF,SAAS,CAAC;IAE3D,IAAIhB,SAAS,IAAIC,OAAO,EAAE;MACxBrB,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAE;QAAExB,KAAK,EAAE6C,SAAS,CAACtE,QAAQ;QAAE0B,GAAG,EAAE6C,OAAO,CAACvE;MAAS,CAAC,CAAC,CAAC;IAC5E;EACF,CAAC;EAED,oBACEN,KAAA,CAAAU,aAAA;IAAKC,SAAS,EAAC,cAAc;IAAAa,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC3B7B,KAAA,CAAAU,aAAA;IAAQmF,OAAO,EAAEN,OAAQ;IAAA/D,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,UAAgB,CAAC,eAC3C7B,KAAA,CAAAU,aAAA;IAAQmF,OAAO,EAAEA,CAAA,KAAMH,OAAO,CAAC,CAAC,EAAE,CAAC,CAAE;IAAAlE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,UAAgB,CAAC,eACvD7B,KAAA,CAAAU,aAAA;IACEC,SAAS,EAAC,iBAAiB;IAC3BmF,GAAG,EAAE/B,iBAAkB;IACvBgC,WAAW,EAAE1B,kBAAmB;IAChC2B,SAAS,EAAEtB,iBAAkB;IAC7BuB,YAAY,EAAEvB,iBAAkB,CAAC;IAAA;IAAAlD,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEhC0B,KAAK,CAACkB,GAAG,CAAC,CAACW,IAAI,EAAEnD,KAAK,kBACrBjC,KAAA,CAAAU,aAAA,CAACoB,IAAI;IACHoE,GAAG,EAAEjE,KAAM;IACXF,KAAK,EAAEqD,IAAI,CAACrD,KAAM;IAClBC,GAAG,EAAEoD,IAAI,CAACpD,GAAI;IACdzB,WAAW,EAAEoE,mBAAoB;IACjCnE,UAAU,EAAEsE,kBAAmB;IAC/BrE,SAAS,EAAE6E,iBAAkB;IAC7BrD,KAAK,EAAEA,KAAM;IAAAT,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACd,CACF,CAAC,EACDwB,KAAK,CAACoB,GAAG,CAAER,IAAI,iBACdjE,KAAA,CAAAU,aAAA,CAACP,IAAI;IACH+F,GAAG,EAAEjC,IAAI,CAAC7D,EAAG;IACbA,EAAE,EAAE6D,IAAI,CAAC7D,EAAG;IACZC,KAAK,EAAE4D,IAAI,CAAC5D,KAAM;IAClBC,QAAQ,EAAE2D,IAAI,CAAC3D,QAAS;IACxBC,WAAW,EAAEyD,mBAAoB;IACjCxD,UAAU,EAAE6D,kBAAmB;IAC/B5D,SAAS,EAAEiE,iBAAkB;IAAAlD,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC9B,CACF,CACE,CACF,CAAC;AAEV,CAAC;AAED,eAAeuB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}