{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anish\\\\Desktop\\\\Anibot\\\\code\\\\DEV\\\\Graph Editor\\\\frontend\\\\src\\\\App.js\";\nimport React, { useState, useRef } from 'react';\nimport './App.css';\nconst Node = ({\n  id,\n  label,\n  position,\n  onDragStart,\n  onDragMove,\n  onDragEnd\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"node\",\n    style: {\n      left: `${position.x}px`,\n      top: `${position.y}px`,\n      position: 'absolute',\n      backgroundColor: '#4CAF50',\n      color: '#fff',\n      borderRadius: '10px',\n      padding: '10px 20px',\n      cursor: 'move'\n    },\n    onMouseDown: e => onDragStart(e, id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, label);\n};\nconst Edge = ({\n  start,\n  end,\n  onDragStart,\n  onDragMove,\n  onDragEnd\n}) => {\n  const calculateLine = (start, end) => {\n    const x1 = start.x;\n    const y1 = start.y;\n    const x2 = end.x;\n    const y2 = end.y;\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    const angle = Math.atan2(dy, dx) * (180 / Math.PI);\n    return {\n      width: length,\n      transform: `rotate(${angle}deg)`,\n      left: x1,\n      top: y1\n    };\n  };\n  const lineStyle = calculateLine(start, end);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'absolute',\n      width: `${lineStyle.width}px`,\n      height: '2px',\n      backgroundColor: '#000',\n      transformOrigin: '0 0',\n      transform: lineStyle.transform,\n      left: `${lineStyle.left}px`,\n      top: `${lineStyle.top}px`,\n      cursor: 'pointer'\n    },\n    onMouseDown: e => onDragStart(e, start, end),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  });\n};\nconst App = () => {\n  const [nodes, setNodes] = useState([{\n    id: 1,\n    label: 'Node 1',\n    position: {\n      x: 100,\n      y: 100\n    }\n  }, {\n    id: 2,\n    label: 'Node 2',\n    position: {\n      x: 300,\n      y: 100\n    }\n  }]);\n  const [edges, setEdges] = useState([]);\n  const [draggingNode, setDraggingNode] = useState(null);\n  const [draggingEdge, setDraggingEdge] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const graphContainerRef = useRef(null);\n\n  // Start dragging a node\n  const handleNodeDragStart = (e, id) => {\n    setDraggingNode(id);\n    const node = nodes.find(node => node.id === id);\n    if (node) {\n      setDragOffset({\n        x: e.clientX - node.position.x,\n        y: e.clientY - node.position.y\n      });\n    }\n  };\n\n  // Handle dragging a node\n  const handleNodeDragMove = e => {\n    if (draggingNode !== null) {\n      const newX = e.clientX - dragOffset.x;\n      const newY = e.clientY - dragOffset.y;\n      setNodes(prevNodes => prevNodes.map(node => node.id === draggingNode ? {\n        ...node,\n        position: {\n          x: newX,\n          y: newY\n        }\n      } : node));\n    }\n  };\n\n  // Stop dragging a node\n  const handleNodeDragEnd = () => {\n    setDraggingNode(null);\n  };\n\n  // Start dragging an edge\n  const handleEdgeDragStart = (e, startNode, endNode) => {\n    setDraggingEdge({\n      startNode,\n      endNode\n    });\n    setDragOffset({\n      x: e.clientX - startNode.x,\n      y: e.clientY - startNode.y\n    });\n  };\n\n  // Handle dragging an edge\n  const handleEdgeDragMove = e => {\n    if (draggingEdge) {\n      const {\n        startNode,\n        endNode\n      } = draggingEdge;\n      const newStartX = e.clientX - dragOffset.x;\n      const newStartY = e.clientY - dragOffset.y;\n      const newEndX = newStartX + (endNode.x - startNode.x);\n      const newEndY = newStartY + (endNode.y - startNode.y);\n      setEdges(prevEdges => prevEdges.map(edge => edge.start === startNode && edge.end === endNode ? {\n        start: {\n          x: newStartX,\n          y: newStartY\n        },\n        end: {\n          x: newEndX,\n          y: newEndY\n        }\n      } : edge));\n    }\n  };\n\n  // Stop dragging an edge\n  const handleEdgeDragEnd = () => {\n    setDraggingEdge(null);\n  };\n\n  // Add a new node\n  const addNode = () => {\n    const newNode = {\n      id: nodes.length + 1,\n      label: `Node ${nodes.length + 1}`,\n      position: {\n        x: Math.random() * 500,\n        y: Math.random() * 500\n      }\n    };\n    setNodes([...nodes, newNode]);\n  };\n\n  // Add an edge between two nodes\n  const addEdge = (startNodeId, endNodeId) => {\n    const startNode = nodes.find(node => node.id === startNodeId);\n    const endNode = nodes.find(node => node.id === endNodeId);\n    if (startNode && endNode) {\n      setEdges([...edges, {\n        start: startNode.position,\n        end: endNode.position\n      }]);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph-editor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addNode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, \"Add Node\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => addEdge(1, 2),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, \"Add Edge\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph-container\",\n    ref: graphContainerRef,\n    onMouseMove: handleNodeDragMove,\n    onMouseUp: handleNodeDragEnd,\n    onMouseLeave: handleNodeDragEnd // Handle when mouse leaves the container\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, edges.map((edge, index) => /*#__PURE__*/React.createElement(Edge, {\n    key: index,\n    start: edge.start,\n    end: edge.end,\n    onDragStart: handleEdgeDragStart,\n    onDragMove: handleEdgeDragMove,\n    onDragEnd: handleEdgeDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  })), nodes.map(node => /*#__PURE__*/React.createElement(Node, {\n    key: node.id,\n    id: node.id,\n    label: node.label,\n    position: node.position,\n    onDragStart: handleNodeDragStart,\n    onDragMove: handleNodeDragMove,\n    onDragEnd: handleNodeDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  }))));\n};\nexport default App;","map":{"version":3,"names":["React","useState","useRef","Node","id","label","position","onDragStart","onDragMove","onDragEnd","createElement","className","style","left","x","top","y","backgroundColor","color","borderRadius","padding","cursor","onMouseDown","e","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Edge","start","end","calculateLine","x1","y1","x2","y2","dx","dy","length","Math","sqrt","angle","atan2","PI","width","transform","lineStyle","height","transformOrigin","App","nodes","setNodes","edges","setEdges","draggingNode","setDraggingNode","draggingEdge","setDraggingEdge","dragOffset","setDragOffset","graphContainerRef","handleNodeDragStart","node","find","clientX","clientY","handleNodeDragMove","newX","newY","prevNodes","map","handleNodeDragEnd","handleEdgeDragStart","startNode","endNode","handleEdgeDragMove","newStartX","newStartY","newEndX","newEndY","prevEdges","edge","handleEdgeDragEnd","addNode","newNode","random","addEdge","startNodeId","endNodeId","onClick","ref","onMouseMove","onMouseUp","onMouseLeave","index","key"],"sources":["C:/Users/anish/Desktop/Anibot/code/DEV/Graph Editor/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './App.css';\r\n\r\nconst Node = ({ id, label, position, onDragStart, onDragMove, onDragEnd }) => {\r\n  return (\r\n    <div\r\n      className=\"node\"\r\n      style={{\r\n        left: `${position.x}px`,\r\n        top: `${position.y}px`,\r\n        position: 'absolute',\r\n        backgroundColor: '#4CAF50',\r\n        color: '#fff',\r\n        borderRadius: '10px',\r\n        padding: '10px 20px',\r\n        cursor: 'move',\r\n      }}\r\n      onMouseDown={(e) => onDragStart(e, id)}\r\n    >\r\n      {label}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Edge = ({ start, end, onDragStart, onDragMove, onDragEnd }) => {\r\n  const calculateLine = (start, end) => {\r\n    const x1 = start.x;\r\n    const y1 = start.y;\r\n    const x2 = end.x;\r\n    const y2 = end.y;\r\n    const dx = x2 - x1;\r\n    const dy = y2 - y1;\r\n    const length = Math.sqrt(dx * dx + dy * dy);\r\n    const angle = Math.atan2(dy, dx) * (180 / Math.PI);\r\n\r\n    return {\r\n      width: length,\r\n      transform: `rotate(${angle}deg)`,\r\n      left: x1,\r\n      top: y1,\r\n    };\r\n  };\r\n\r\n  const lineStyle = calculateLine(start, end);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        width: `${lineStyle.width}px`,\r\n        height: '2px',\r\n        backgroundColor: '#000',\r\n        transformOrigin: '0 0',\r\n        transform: lineStyle.transform,\r\n        left: `${lineStyle.left}px`,\r\n        top: `${lineStyle.top}px`,\r\n        cursor: 'pointer',\r\n      }}\r\n      onMouseDown={(e) => onDragStart(e, start, end)}\r\n    />\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  const [nodes, setNodes] = useState([\r\n    { id: 1, label: 'Node 1', position: { x: 100, y: 100 } },\r\n    { id: 2, label: 'Node 2', position: { x: 300, y: 100 } },\r\n  ]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [draggingNode, setDraggingNode] = useState(null);\r\n  const [draggingEdge, setDraggingEdge] = useState(null);\r\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\r\n\r\n  const graphContainerRef = useRef(null);\r\n\r\n  // Start dragging a node\r\n  const handleNodeDragStart = (e, id) => {\r\n    setDraggingNode(id);\r\n    const node = nodes.find((node) => node.id === id);\r\n    if (node) {\r\n      setDragOffset({\r\n        x: e.clientX - node.position.x,\r\n        y: e.clientY - node.position.y,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handle dragging a node\r\n  const handleNodeDragMove = (e) => {\r\n    if (draggingNode !== null) {\r\n      const newX = e.clientX - dragOffset.x;\r\n      const newY = e.clientY - dragOffset.y;\r\n      setNodes((prevNodes) =>\r\n        prevNodes.map((node) =>\r\n          node.id === draggingNode ? { ...node, position: { x: newX, y: newY } } : node\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  // Stop dragging a node\r\n  const handleNodeDragEnd = () => {\r\n    setDraggingNode(null);\r\n  };\r\n\r\n  // Start dragging an edge\r\n  const handleEdgeDragStart = (e, startNode, endNode) => {\r\n    setDraggingEdge({ startNode, endNode });\r\n    setDragOffset({\r\n      x: e.clientX - startNode.x,\r\n      y: e.clientY - startNode.y,\r\n    });\r\n  };\r\n\r\n  // Handle dragging an edge\r\n  const handleEdgeDragMove = (e) => {\r\n    if (draggingEdge) {\r\n      const { startNode, endNode } = draggingEdge;\r\n      const newStartX = e.clientX - dragOffset.x;\r\n      const newStartY = e.clientY - dragOffset.y;\r\n\r\n      const newEndX = newStartX + (endNode.x - startNode.x);\r\n      const newEndY = newStartY + (endNode.y - startNode.y);\r\n\r\n      setEdges((prevEdges) =>\r\n        prevEdges.map((edge) =>\r\n          edge.start === startNode && edge.end === endNode\r\n            ? { start: { x: newStartX, y: newStartY }, end: { x: newEndX, y: newEndY } }\r\n            : edge\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  // Stop dragging an edge\r\n  const handleEdgeDragEnd = () => {\r\n    setDraggingEdge(null);\r\n  };\r\n\r\n  // Add a new node\r\n  const addNode = () => {\r\n    const newNode = {\r\n      id: nodes.length + 1,\r\n      label: `Node ${nodes.length + 1}`,\r\n      position: { x: Math.random() * 500, y: Math.random() * 500 },\r\n    };\r\n    setNodes([...nodes, newNode]);\r\n  };\r\n\r\n  // Add an edge between two nodes\r\n  const addEdge = (startNodeId, endNodeId) => {\r\n    const startNode = nodes.find((node) => node.id === startNodeId);\r\n    const endNode = nodes.find((node) => node.id === endNodeId);\r\n\r\n    if (startNode && endNode) {\r\n      setEdges([...edges, { start: startNode.position, end: endNode.position }]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-editor\">\r\n      <button onClick={addNode}>Add Node</button>\r\n      <button onClick={() => addEdge(1, 2)}>Add Edge</button>\r\n      <div\r\n        className=\"graph-container\"\r\n        ref={graphContainerRef}\r\n        onMouseMove={handleNodeDragMove}\r\n        onMouseUp={handleNodeDragEnd}\r\n        onMouseLeave={handleNodeDragEnd} // Handle when mouse leaves the container\r\n      >\r\n        {edges.map((edge, index) => (\r\n          <Edge\r\n            key={index}\r\n            start={edge.start}\r\n            end={edge.end}\r\n            onDragStart={handleEdgeDragStart}\r\n            onDragMove={handleEdgeDragMove}\r\n            onDragEnd={handleEdgeDragEnd}\r\n          />\r\n        ))}\r\n        {nodes.map((node) => (\r\n          <Node\r\n            key={node.id}\r\n            id={node.id}\r\n            label={node.label}\r\n            position={node.position}\r\n            onDragStart={handleNodeDragStart}\r\n            onDragMove={handleNodeDragMove}\r\n            onDragEnd={handleNodeDragEnd}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}