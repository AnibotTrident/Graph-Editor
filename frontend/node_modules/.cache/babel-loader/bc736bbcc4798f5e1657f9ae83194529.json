{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anish\\\\Desktop\\\\Anibot\\\\code\\\\DEV\\\\Graph Editor\\\\frontend\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nconst Node = ({\n  id,\n  label,\n  position,\n  onDragStart,\n  onClick,\n  isSelected\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `node ${isSelected ? 'selected' : ''}`,\n    style: {\n      left: `${position.x}px`,\n      top: `${position.y}px`,\n      position: 'absolute'\n    },\n    onMouseDown: e => onDragStart(e, id),\n    onClick: () => onClick(id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, label);\n};\nconst Edge = ({\n  start,\n  end\n}) => {\n  const calculateLine = (start, end) => {\n    const dx = end.x - start.x;\n    const dy = end.y - start.y;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    const angle = Math.atan2(dy, dx) * (180 / Math.PI);\n    return {\n      width: length,\n      transform: `rotate(${angle}deg)`,\n      left: start.x,\n      top: start.y\n    };\n  };\n  const lineStyle = calculateLine(start, end);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'absolute',\n      width: `${lineStyle.width}px`,\n      height: '2px',\n      backgroundColor: '#000',\n      transformOrigin: '0 0',\n      transform: lineStyle.transform,\n      left: `${lineStyle.left}px`,\n      top: `${lineStyle.top}px`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  });\n};\nconst App = () => {\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [draggingNode, setDraggingNode] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [addingEdge, setAddingEdge] = useState(false);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n  const [undoRedoStack, setUndoRedoStack] = useState([]);\n  const nodeRadius = 40;\n  useEffect(() => {\n    // Fetch initial nodes and edges from the backend\n    axios.get('http://localhost:5000/nodes').then(response => setNodes(response.data));\n    axios.get('http://localhost:5000/edges').then(response => setEdges(response.data));\n  }, []);\n  const handleNodeDragStart = (e, id) => {\n    setDraggingNode(id);\n    const node = nodes.find(node => node.id === id);\n    if (node) {\n      setDragOffset({\n        x: e.clientX - node.position.x,\n        y: e.clientY - node.position.y\n      });\n    }\n  };\n  const handleNodeDragMove = e => {\n    if (draggingNode !== null) {\n      const newX = e.clientX - dragOffset.x;\n      const newY = e.clientY - dragOffset.y;\n\n      // Update node position\n      setNodes(prevNodes => prevNodes.map(node => node.id === draggingNode ? {\n        ...node,\n        position: {\n          x: newX,\n          y: newY\n        }\n      } : node));\n\n      // Update edges connected to the dragged node\n      setEdges(prevEdges => prevEdges.map(edge => {\n        if (edge.startNodeId === draggingNode) {\n          return {\n            ...edge,\n            start: {\n              x: newX + nodeRadius,\n              y: newY + nodeRadius\n            }\n          };\n        } else if (edge.endNodeId === draggingNode) {\n          return {\n            ...edge,\n            end: {\n              x: newX + nodeRadius,\n              y: newY + nodeRadius\n            }\n          };\n        }\n        return edge;\n      }));\n    }\n  };\n  const handleNodeDragEnd = () => {\n    setDraggingNode(null);\n  };\n  const addNode = async () => {\n    const newNode = {\n      label: `Node ${nodes.length + 1}`,\n      position: {\n        x: Math.random() * 500,\n        y: Math.random() * 500\n      }\n    };\n    const response = await axios.post('http://localhost:5000/nodes', newNode);\n    setNodes([...nodes, response.data]);\n  };\n  const addEdge = async (startNodeId, endNodeId) => {\n    const startNode = nodes.find(node => node.id === startNodeId);\n    const endNode = nodes.find(node => node.id === endNodeId);\n    if (startNode && endNode) {\n      const newEdge = {\n        start: {\n          x: startNode.position.x + nodeRadius,\n          y: startNode.position.y + nodeRadius\n        },\n        end: {\n          x: endNode.position.x + nodeRadius,\n          y: endNode.position.y + nodeRadius\n        },\n        startNodeId,\n        endNodeId\n      };\n      const response = await axios.post('http://localhost:5000/edges', newEdge);\n      setEdges([...edges, response.data]);\n    }\n  };\n  const handleAddEdgeClick = () => {\n    setAddingEdge(true);\n    setSelectedNodes([]);\n  };\n  const handleNodeClick = id => {\n    if (addingEdge) {\n      if (selectedNodes.length < 2) {\n        setSelectedNodes(prevSelected => [...prevSelected, id]);\n      }\n      if (selectedNodes.length === 1) {\n        addEdge(selectedNodes[0], id);\n        setAddingEdge(false);\n        setSelectedNodes([]);\n      }\n    }\n  };\n  const handleUndo = async () => {\n    const response = await axios.post('http://localhost:5000/actions/undo');\n    if (response.data) {\n      // Update the nodes and edges based on the undo action\n      setNodes(response.data.nodes);\n      setEdges(response.data.edges);\n    }\n  };\n  const handleRedo = async () => {\n    const response = await axios.post('http://localhost:5000/actions/redo');\n    if (response.data) {\n      // Update the nodes and edges based on the redo action\n      setNodes(response.data.nodes);\n      setEdges(response.data.edges);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph-editor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addNode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, \"Add Node\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleAddEdgeClick,\n    className: addingEdge ? 'active' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, \"Add Edge\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleUndo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, \"Undo\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleRedo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, \"Redo\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph-container\",\n    onMouseMove: handleNodeDragMove,\n    onMouseUp: handleNodeDragEnd,\n    onMouseLeave: handleNodeDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }\n  }, edges.map((edge, index) => /*#__PURE__*/React.createElement(Edge, {\n    key: index,\n    start: edge.start,\n    end: edge.end,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 11\n    }\n  })), nodes.map(node => /*#__PURE__*/React.createElement(Node, {\n    key: node.id,\n    id: node.id,\n    label: node.label,\n    position: node.position,\n    onDragStart: handleNodeDragStart,\n    onClick: handleNodeClick,\n    isSelected: selectedNodes.includes(node.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 11\n    }\n  }))));\n};\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","axios","Node","id","label","position","onDragStart","onClick","isSelected","createElement","className","style","left","x","top","y","onMouseDown","e","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Edge","start","end","calculateLine","dx","dy","length","Math","sqrt","angle","atan2","PI","width","transform","lineStyle","height","backgroundColor","transformOrigin","App","nodes","setNodes","edges","setEdges","draggingNode","setDraggingNode","dragOffset","setDragOffset","addingEdge","setAddingEdge","selectedNodes","setSelectedNodes","undoRedoStack","setUndoRedoStack","nodeRadius","get","then","response","data","handleNodeDragStart","node","find","clientX","clientY","handleNodeDragMove","newX","newY","prevNodes","map","prevEdges","edge","startNodeId","endNodeId","handleNodeDragEnd","addNode","newNode","random","post","addEdge","startNode","endNode","newEdge","handleAddEdgeClick","handleNodeClick","prevSelected","handleUndo","handleRedo","onMouseMove","onMouseUp","onMouseLeave","index","key","includes"],"sources":["C:/Users/anish/Desktop/Anibot/code/DEV/Graph Editor/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\nconst Node = ({ id, label, position, onDragStart, onClick, isSelected }) => {\r\n  return (\r\n    <div\r\n      className={`node ${isSelected ? 'selected' : ''}`}\r\n      style={{\r\n        left: `${position.x}px`,\r\n        top: `${position.y}px`,\r\n        position: 'absolute',\r\n      }}\r\n      onMouseDown={(e) => onDragStart(e, id)}\r\n      onClick={() => onClick(id)}\r\n    >\r\n      {label}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Edge = ({ start, end }) => {\r\n  const calculateLine = (start, end) => {\r\n    const dx = end.x - start.x;\r\n    const dy = end.y - start.y;\r\n    const length = Math.sqrt(dx * dx + dy * dy);\r\n    const angle = Math.atan2(dy, dx) * (180 / Math.PI);\r\n\r\n    return {\r\n      width: length,\r\n      transform: `rotate(${angle}deg)`,\r\n      left: start.x,\r\n      top: start.y,\r\n    };\r\n  };\r\n\r\n  const lineStyle = calculateLine(start, end);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        width: `${lineStyle.width}px`,\r\n        height: '2px',\r\n        backgroundColor: '#000',\r\n        transformOrigin: '0 0',\r\n        transform: lineStyle.transform,\r\n        left: `${lineStyle.left}px`,\r\n        top: `${lineStyle.top}px`,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [draggingNode, setDraggingNode] = useState(null);\r\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\r\n  const [addingEdge, setAddingEdge] = useState(false);\r\n  const [selectedNodes, setSelectedNodes] = useState([]);\r\n  const [undoRedoStack, setUndoRedoStack] = useState([]);\r\n\r\n  const nodeRadius = 40;\r\n\r\n  useEffect(() => {\r\n    // Fetch initial nodes and edges from the backend\r\n    axios.get('http://localhost:5000/nodes').then((response) => setNodes(response.data));\r\n    axios.get('http://localhost:5000/edges').then((response) => setEdges(response.data));\r\n  }, []);\r\n\r\n  const handleNodeDragStart = (e, id) => {\r\n    setDraggingNode(id);\r\n    const node = nodes.find((node) => node.id === id);\r\n    if (node) {\r\n      setDragOffset({\r\n        x: e.clientX - node.position.x,\r\n        y: e.clientY - node.position.y,\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleNodeDragMove = (e) => {\r\n    if (draggingNode !== null) {\r\n      const newX = e.clientX - dragOffset.x;\r\n      const newY = e.clientY - dragOffset.y;\r\n\r\n      // Update node position\r\n      setNodes((prevNodes) =>\r\n        prevNodes.map((node) =>\r\n          node.id === draggingNode ? { ...node, position: { x: newX, y: newY } } : node\r\n        )\r\n      );\r\n\r\n      // Update edges connected to the dragged node\r\n      setEdges((prevEdges) =>\r\n        prevEdges.map((edge) => {\r\n          if (edge.startNodeId === draggingNode) {\r\n            return {\r\n              ...edge,\r\n              start: { x: newX + nodeRadius, y: newY + nodeRadius },\r\n            };\r\n          } else if (edge.endNodeId === draggingNode) {\r\n            return {\r\n              ...edge,\r\n              end: { x: newX + nodeRadius, y: newY + nodeRadius },\r\n            };\r\n          }\r\n          return edge;\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleNodeDragEnd = () => {\r\n    setDraggingNode(null);\r\n  };\r\n\r\n  const addNode = async () => {\r\n    const newNode = {\r\n      label: `Node ${nodes.length + 1}`,\r\n      position: { x: Math.random() * 500, y: Math.random() * 500 },\r\n    };\r\n    const response = await axios.post('http://localhost:5000/nodes', newNode);\r\n    setNodes([...nodes, response.data]);\r\n  };\r\n\r\n  const addEdge = async (startNodeId, endNodeId) => {\r\n    const startNode = nodes.find((node) => node.id === startNodeId);\r\n    const endNode = nodes.find((node) => node.id === endNodeId);\r\n\r\n    if (startNode && endNode) {\r\n      const newEdge = {\r\n        start: { x: startNode.position.x + nodeRadius, y: startNode.position.y + nodeRadius },\r\n        end: { x: endNode.position.x + nodeRadius, y: endNode.position.y + nodeRadius },\r\n        startNodeId,\r\n        endNodeId,\r\n      };\r\n\r\n      const response = await axios.post('http://localhost:5000/edges', newEdge);\r\n      setEdges([...edges, response.data]);\r\n    }\r\n  };\r\n\r\n  const handleAddEdgeClick = () => {\r\n    setAddingEdge(true);\r\n    setSelectedNodes([]);\r\n  };\r\n\r\n  const handleNodeClick = (id) => {\r\n    if (addingEdge) {\r\n      if (selectedNodes.length < 2) {\r\n        setSelectedNodes((prevSelected) => [...prevSelected, id]);\r\n      }\r\n      if (selectedNodes.length === 1) {\r\n        addEdge(selectedNodes[0], id);\r\n        setAddingEdge(false);\r\n        setSelectedNodes([]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUndo = async () => {\r\n    const response = await axios.post('http://localhost:5000/actions/undo');\r\n    if (response.data) {\r\n      // Update the nodes and edges based on the undo action\r\n      setNodes(response.data.nodes);\r\n      setEdges(response.data.edges);\r\n    }\r\n  };\r\n\r\n  const handleRedo = async () => {\r\n    const response = await axios.post('http://localhost:5000/actions/redo');\r\n    if (response.data) {\r\n      // Update the nodes and edges based on the redo action\r\n      setNodes(response.data.nodes);\r\n      setEdges(response.data.edges);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-editor\">\r\n      <div className=\"button-container\">\r\n        <button onClick={addNode}>Add Node</button>\r\n        <button onClick={handleAddEdgeClick} className={addingEdge ? 'active' : ''}>\r\n          Add Edge\r\n        </button>\r\n        <button onClick={handleUndo}>Undo</button>\r\n        <button onClick={handleRedo}>Redo</button>\r\n      </div>\r\n      <div\r\n        className=\"graph-container\"\r\n        onMouseMove={handleNodeDragMove}\r\n        onMouseUp={handleNodeDragEnd}\r\n        onMouseLeave={handleNodeDragEnd}\r\n      >\r\n        {edges.map((edge, index) => (\r\n          <Edge key={index} start={edge.start} end={edge.end} />\r\n        ))}\r\n        {nodes.map((node) => (\r\n          <Node\r\n            key={node.id}\r\n            id={node.id}\r\n            label={node.label}\r\n            position={node.position}\r\n            onDragStart={handleNodeDragStart}\r\n            onClick={handleNodeClick}\r\n            isSelected={selectedNodes.includes(node.id)}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}