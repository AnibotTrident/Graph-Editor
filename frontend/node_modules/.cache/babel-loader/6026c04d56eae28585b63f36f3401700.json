{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anish\\\\Desktop\\\\Anibot\\\\code\\\\DEV\\\\Graph Editor\\\\frontend\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nconst Node = ({\n  id,\n  label,\n  position,\n  onDrag\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"node\",\n    style: {\n      left: `${position.x}px`,\n      top: `${position.y}px`,\n      position: 'absolute',\n      backgroundColor: '#fff',\n      border: '1px solid #000',\n      borderRadius: '5px',\n      padding: '10px',\n      cursor: 'move'\n    },\n    draggable: true,\n    onDrag: e => onDrag(e, id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, label);\n};\nconst Edge = ({\n  start,\n  end\n}) => {\n  const calculateLine = (start, end) => {\n    const x1 = start.x;\n    const y1 = start.y;\n    const x2 = end.x;\n    const y2 = end.y;\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    const angle = Math.atan2(dy, dx) * (180 / Math.PI);\n    return {\n      width: length,\n      transform: `rotate(${angle}deg)`,\n      left: x1,\n      top: y1\n    };\n  };\n  const lineStyle = calculateLine(start, end);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'absolute',\n      width: `${lineStyle.width}px`,\n      height: '2px',\n      backgroundColor: '#000',\n      transformOrigin: '0 0',\n      transform: lineStyle.transform,\n      left: `${lineStyle.left}px`,\n      top: `${lineStyle.top}px`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  });\n};\nconst App = () => {\n  const [nodes, setNodes] = useState([{\n    id: 1,\n    label: 'Node 1',\n    position: {\n      x: 100,\n      y: 100\n    }\n  }, {\n    id: 2,\n    label: 'Node 2',\n    position: {\n      x: 300,\n      y: 100\n    }\n  }]);\n  const [edges, setEdges] = useState([{\n    start: {\n      x: 100,\n      y: 100\n    },\n    end: {\n      x: 300,\n      y: 100\n    }\n  }]);\n  const handleNodeDrag = (e, id) => {\n    const newPosition = {\n      x: e.clientX - 50,\n      y: e.clientY - 25\n    };\n    setNodes(prevNodes => prevNodes.map(node => node.id === id ? {\n      ...node,\n      position: newPosition\n    } : node));\n  };\n  const addNode = () => {\n    const newNode = {\n      id: nodes.length + 1,\n      label: `Node ${nodes.length + 1}`,\n      position: {\n        x: Math.random() * 500,\n        y: Math.random() * 500\n      }\n    };\n    setNodes([...nodes, newNode]);\n  };\n  const addEdge = (startNodeId, endNodeId) => {\n    const startNode = nodes.find(node => node.id === startNodeId);\n    const endNode = nodes.find(node => node.id === endNodeId);\n    if (startNode && endNode) {\n      setEdges([...edges, {\n        start: startNode.position,\n        end: endNode.position\n      }]);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph-editor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addNode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, \"Add Node\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => addEdge(1, 2),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, \"Add Edge\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, edges.map((edge, index) => /*#__PURE__*/React.createElement(Edge, {\n    key: index,\n    start: edge.start,\n    end: edge.end,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  })), nodes.map(node => /*#__PURE__*/React.createElement(Node, {\n    key: node.id,\n    id: node.id,\n    label: node.label,\n    position: node.position,\n    onDrag: handleNodeDrag,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }))));\n};\nexport default App;","map":{"version":3,"names":["React","useState","Node","id","label","position","onDrag","createElement","className","style","left","x","top","y","backgroundColor","border","borderRadius","padding","cursor","draggable","e","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Edge","start","end","calculateLine","x1","y1","x2","y2","dx","dy","length","Math","sqrt","angle","atan2","PI","width","transform","lineStyle","height","transformOrigin","App","nodes","setNodes","edges","setEdges","handleNodeDrag","newPosition","clientX","clientY","prevNodes","map","node","addNode","newNode","random","addEdge","startNodeId","endNodeId","startNode","find","endNode","onClick","edge","index","key"],"sources":["C:/Users/anish/Desktop/Anibot/code/DEV/Graph Editor/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nconst Node = ({ id, label, position, onDrag }) => {\r\n  return (\r\n    <div\r\n      className=\"node\"\r\n      style={{\r\n        left: `${position.x}px`,\r\n        top: `${position.y}px`,\r\n        position: 'absolute',\r\n        backgroundColor: '#fff',\r\n        border: '1px solid #000',\r\n        borderRadius: '5px',\r\n        padding: '10px',\r\n        cursor: 'move',\r\n      }}\r\n      draggable\r\n      onDrag={(e) => onDrag(e, id)}\r\n    >\r\n      {label}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Edge = ({ start, end }) => {\r\n  const calculateLine = (start, end) => {\r\n    const x1 = start.x;\r\n    const y1 = start.y;\r\n    const x2 = end.x;\r\n    const y2 = end.y;\r\n    const dx = x2 - x1;\r\n    const dy = y2 - y1;\r\n    const length = Math.sqrt(dx * dx + dy * dy);\r\n    const angle = Math.atan2(dy, dx) * (180 / Math.PI);\r\n\r\n    return {\r\n      width: length,\r\n      transform: `rotate(${angle}deg)`,\r\n      left: x1,\r\n      top: y1,\r\n    };\r\n  };\r\n\r\n  const lineStyle = calculateLine(start, end);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        width: `${lineStyle.width}px`,\r\n        height: '2px',\r\n        backgroundColor: '#000',\r\n        transformOrigin: '0 0',\r\n        transform: lineStyle.transform,\r\n        left: `${lineStyle.left}px`,\r\n        top: `${lineStyle.top}px`,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  const [nodes, setNodes] = useState([\r\n    { id: 1, label: 'Node 1', position: { x: 100, y: 100 } },\r\n    { id: 2, label: 'Node 2', position: { x: 300, y: 100 } },\r\n  ]);\r\n\r\n  const [edges, setEdges] = useState([\r\n    { start: { x: 100, y: 100 }, end: { x: 300, y: 100 } },\r\n  ]);\r\n\r\n  const handleNodeDrag = (e, id) => {\r\n    const newPosition = { x: e.clientX - 50, y: e.clientY - 25 };\r\n    setNodes((prevNodes) =>\r\n      prevNodes.map((node) =>\r\n        node.id === id ? { ...node, position: newPosition } : node\r\n      )\r\n    );\r\n  };\r\n\r\n  const addNode = () => {\r\n    const newNode = {\r\n      id: nodes.length + 1,\r\n      label: `Node ${nodes.length + 1}`,\r\n      position: { x: Math.random() * 500, y: Math.random() * 500 },\r\n    };\r\n    setNodes([...nodes, newNode]);\r\n  };\r\n\r\n  const addEdge = (startNodeId, endNodeId) => {\r\n    const startNode = nodes.find((node) => node.id === startNodeId);\r\n    const endNode = nodes.find((node) => node.id === endNodeId);\r\n\r\n    if (startNode && endNode) {\r\n      setEdges([...edges, { start: startNode.position, end: endNode.position }]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-editor\">\r\n      <button onClick={addNode}>Add Node</button>\r\n      <button onClick={() => addEdge(1, 2)}>Add Edge</button>\r\n      <div className=\"graph-container\">\r\n        {edges.map((edge, index) => (\r\n          <Edge key={index} start={edge.start} end={edge.end} />\r\n        ))}\r\n        {nodes.map((node) => (\r\n          <Node\r\n            key={node.id}\r\n            id={node.id}\r\n            label={node.label}\r\n            position={node.position}\r\n            onDrag={handleNodeDrag}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}