{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anish\\\\Desktop\\\\Anibot\\\\code\\\\DEV\\\\Graph Editor\\\\frontend\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nconst Node = ({\n  id,\n  label,\n  position,\n  onDragStart,\n  onDragMove,\n  onDragEnd\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"node\",\n    style: {\n      left: `${position.x}px`,\n      top: `${position.y}px`,\n      position: 'absolute',\n      backgroundColor: '#4CAF50',\n      color: '#fff',\n      borderRadius: '10px',\n      padding: '10px 20px',\n      cursor: 'move'\n    },\n    onMouseDown: e => onDragStart(e, id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, label);\n};\nconst Edge = ({\n  start,\n  end\n}) => {\n  const calculateLine = (start, end) => {\n    const x1 = start.x;\n    const y1 = start.y;\n    const x2 = end.x;\n    const y2 = end.y;\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    const angle = Math.atan2(dy, dx) * (180 / Math.PI);\n    return {\n      width: length,\n      transform: `rotate(${angle}deg)`,\n      left: x1,\n      top: y1\n    };\n  };\n  const lineStyle = calculateLine(start, end);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'absolute',\n      width: `${lineStyle.width}px`,\n      height: '2px',\n      backgroundColor: '#000',\n      transformOrigin: '0 0',\n      transform: lineStyle.transform,\n      left: `${lineStyle.left}px`,\n      top: `${lineStyle.top}px`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  });\n};\nconst App = () => {\n  const [nodes, setNodes] = useState([]); // Start with no nodes\n  const [edges, setEdges] = useState([]);\n  const [draggingNode, setDraggingNode] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [addingEdge, setAddingEdge] = useState(false);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n  const nodeRadius = 40; // Approximate radius of a node for edge positioning\n\n  // Start dragging a node\n  const handleNodeDragStart = (e, id) => {\n    setDraggingNode(id);\n    const node = nodes.find(node => node.id === id);\n    if (node) {\n      setDragOffset({\n        x: e.clientX - node.position.x,\n        y: e.clientY - node.position.y\n      });\n    }\n  };\n\n  // Handle dragging a node and update the node's position\n  const handleNodeDragMove = e => {\n    if (draggingNode !== null) {\n      const newX = e.clientX - dragOffset.x;\n      const newY = e.clientY - dragOffset.y;\n\n      // Update the node position\n      setNodes(prevNodes => prevNodes.map(node => node.id === draggingNode ? {\n        ...node,\n        position: {\n          x: newX,\n          y: newY\n        }\n      } : node));\n\n      // Update the edges connected to the dragged node\n      setEdges(prevEdges => prevEdges.map(edge => {\n        if (edge.startNodeId === draggingNode) {\n          return {\n            ...edge,\n            start: {\n              x: newX,\n              y: newY\n            }\n          };\n        } else if (edge.endNodeId === draggingNode) {\n          return {\n            ...edge,\n            end: {\n              x: newX,\n              y: newY\n            }\n          };\n        }\n        return edge;\n      }));\n    }\n  };\n\n  // Stop dragging a node\n  const handleNodeDragEnd = () => {\n    setDraggingNode(null);\n  };\n\n  // Add a new node\n  const addNode = () => {\n    const newNode = {\n      id: nodes.length + 1,\n      label: `Node ${nodes.length + 1}`,\n      position: {\n        x: Math.random() * 500,\n        y: Math.random() * 500\n      }\n    };\n    setNodes([...nodes, newNode]);\n  };\n\n  // Add an edge between two nodes\n  const addEdge = (startNodeId, endNodeId) => {\n    const startNode = nodes.find(node => node.id === startNodeId);\n    const endNode = nodes.find(node => node.id === endNodeId);\n    if (startNode && endNode) {\n      setEdges([...edges, {\n        startNodeId,\n        endNodeId,\n        start: startNode.position,\n        end: endNode.position\n      }]);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph-editor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addNode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, \"Add Node\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => addEdge(1, 2),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, \"Add Edge\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph-container\",\n    onMouseMove: handleNodeDragMove,\n    onMouseUp: handleNodeDragEnd,\n    onMouseLeave: handleNodeDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, edges.map((edge, index) => /*#__PURE__*/React.createElement(Edge, {\n    key: index,\n    start: edge.start,\n    end: edge.end,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  })), nodes.map(node => /*#__PURE__*/React.createElement(Node, {\n    key: node.id,\n    id: node.id,\n    label: node.label,\n    position: node.position,\n    onDragStart: handleNodeDragStart,\n    onDragMove: handleNodeDragMove,\n    onDragEnd: handleNodeDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }))));\n};\nexport default App;","map":{"version":3,"names":["React","useState","Node","id","label","position","onDragStart","onDragMove","onDragEnd","createElement","className","style","left","x","top","y","backgroundColor","color","borderRadius","padding","cursor","onMouseDown","e","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Edge","start","end","calculateLine","x1","y1","x2","y2","dx","dy","length","Math","sqrt","angle","atan2","PI","width","transform","lineStyle","height","transformOrigin","App","nodes","setNodes","edges","setEdges","draggingNode","setDraggingNode","dragOffset","setDragOffset","addingEdge","setAddingEdge","selectedNodes","setSelectedNodes","nodeRadius","handleNodeDragStart","node","find","clientX","clientY","handleNodeDragMove","newX","newY","prevNodes","map","prevEdges","edge","startNodeId","endNodeId","handleNodeDragEnd","addNode","newNode","random","addEdge","startNode","endNode","onClick","onMouseMove","onMouseUp","onMouseLeave","index","key"],"sources":["C:/Users/anish/Desktop/Anibot/code/DEV/Graph Editor/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nconst Node = ({ id, label, position, onDragStart, onDragMove, onDragEnd }) => {\r\n  return (\r\n    <div\r\n      className=\"node\"\r\n      style={{\r\n        left: `${position.x}px`,\r\n        top: `${position.y}px`,\r\n        position: 'absolute',\r\n        backgroundColor: '#4CAF50',\r\n        color: '#fff',\r\n        borderRadius: '10px',\r\n        padding: '10px 20px',\r\n        cursor: 'move',\r\n      }}\r\n      onMouseDown={(e) => onDragStart(e, id)}\r\n    >\r\n      {label}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Edge = ({ start, end }) => {\r\n  const calculateLine = (start, end) => {\r\n    const x1 = start.x;\r\n    const y1 = start.y;\r\n    const x2 = end.x;\r\n    const y2 = end.y;\r\n    const dx = x2 - x1;\r\n    const dy = y2 - y1;\r\n    const length = Math.sqrt(dx * dx + dy * dy);\r\n    const angle = Math.atan2(dy, dx) * (180 / Math.PI);\r\n\r\n    return {\r\n      width: length,\r\n      transform: `rotate(${angle}deg)`,\r\n      left: x1,\r\n      top: y1,\r\n    };\r\n  };\r\n\r\n  const lineStyle = calculateLine(start, end);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        width: `${lineStyle.width}px`,\r\n        height: '2px',\r\n        backgroundColor: '#000',\r\n        transformOrigin: '0 0',\r\n        transform: lineStyle.transform,\r\n        left: `${lineStyle.left}px`,\r\n        top: `${lineStyle.top}px`,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  const [nodes, setNodes] = useState([]); // Start with no nodes\r\n  const [edges, setEdges] = useState([]);\r\n  const [draggingNode, setDraggingNode] = useState(null);\r\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\r\n  const [addingEdge, setAddingEdge] = useState(false);\r\n  const [selectedNodes, setSelectedNodes] = useState([]);\r\n\r\n  const nodeRadius = 40; // Approximate radius of a node for edge positioning\r\n\r\n  // Start dragging a node\r\n  const handleNodeDragStart = (e, id) => {\r\n    setDraggingNode(id);\r\n    const node = nodes.find((node) => node.id === id);\r\n    if (node) {\r\n      setDragOffset({\r\n        x: e.clientX - node.position.x,\r\n        y: e.clientY - node.position.y,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handle dragging a node and update the node's position\r\n  const handleNodeDragMove = (e) => {\r\n    if (draggingNode !== null) {\r\n      const newX = e.clientX - dragOffset.x;\r\n      const newY = e.clientY - dragOffset.y;\r\n\r\n      // Update the node position\r\n      setNodes((prevNodes) =>\r\n        prevNodes.map((node) =>\r\n          node.id === draggingNode\r\n            ? { ...node, position: { x: newX, y: newY } }\r\n            : node\r\n        )\r\n      );\r\n\r\n      // Update the edges connected to the dragged node\r\n      setEdges((prevEdges) =>\r\n        prevEdges.map((edge) => {\r\n          if (edge.startNodeId === draggingNode) {\r\n            return { ...edge, start: { x: newX, y: newY } };\r\n          } else if (edge.endNodeId === draggingNode) {\r\n            return { ...edge, end: { x: newX, y: newY } };\r\n          }\r\n          return edge;\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  // Stop dragging a node\r\n  const handleNodeDragEnd = () => {\r\n    setDraggingNode(null);\r\n  };\r\n\r\n  // Add a new node\r\n  const addNode = () => {\r\n    const newNode = {\r\n      id: nodes.length + 1,\r\n      label: `Node ${nodes.length + 1}`,\r\n      position: { x: Math.random() * 500, y: Math.random() * 500 },\r\n    };\r\n    setNodes([...nodes, newNode]);\r\n  };\r\n\r\n  // Add an edge between two nodes\r\n  const addEdge = (startNodeId, endNodeId) => {\r\n    const startNode = nodes.find((node) => node.id === startNodeId);\r\n    const endNode = nodes.find((node) => node.id === endNodeId);\r\n\r\n    if (startNode && endNode) {\r\n      setEdges([\r\n        ...edges,\r\n        {\r\n          startNodeId,\r\n          endNodeId,\r\n          start: startNode.position,\r\n          end: endNode.position,\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-editor\">\r\n      <button onClick={addNode}>Add Node</button>\r\n      <button onClick={() => addEdge(1, 2)}>Add Edge</button>\r\n      <div\r\n        className=\"graph-container\"\r\n        onMouseMove={handleNodeDragMove}\r\n        onMouseUp={handleNodeDragEnd}\r\n        onMouseLeave={handleNodeDragEnd}\r\n      >\r\n        {edges.map((edge, index) => (\r\n          <Edge key={index} start={edge.start} end={edge.end} />\r\n        ))}\r\n        {nodes.map((node) => (\r\n          <Node\r\n            key={node.id}\r\n            id={node.id}\r\n            label={node.label}\r\n            position={node.position}\r\n            onDragStart={handleNodeDragStart}\r\n            onDragMove={handleNodeDragMove}\r\n            onDragEnd={handleNodeDragEnd}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}