{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anish\\\\Desktop\\\\Anibot\\\\code\\\\DEV\\\\Graph Editor\\\\frontend\\\\src\\\\App.js\";\nimport React, { useState, useRef } from 'react';\nimport './App.css';\nconst Node = ({\n  id,\n  label,\n  position,\n  onClick,\n  isSelected\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"node\",\n    style: {\n      left: `${position.x}px`,\n      top: `${position.y}px`,\n      position: 'absolute',\n      backgroundColor: isSelected ? '#FF5733' : '#4CAF50',\n      // Change color if selected\n      color: '#fff',\n      borderRadius: '10px',\n      padding: '10px 20px',\n      cursor: 'pointer'\n    },\n    onClick: () => onClick(id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, label);\n};\nconst Edge = ({\n  start,\n  end\n}) => {\n  const calculateLine = (start, end) => {\n    const x1 = start.x;\n    const y1 = start.y;\n    const x2 = end.x;\n    const y2 = end.y;\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    const angle = Math.atan2(dy, dx) * (180 / Math.PI);\n    return {\n      width: length,\n      transform: `rotate(${angle}deg)`,\n      left: x1,\n      top: y1\n    };\n  };\n  const lineStyle = calculateLine(start, end);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'absolute',\n      width: `${lineStyle.width}px`,\n      height: '2px',\n      backgroundColor: '#000',\n      transformOrigin: '0 0',\n      transform: lineStyle.transform,\n      left: `${lineStyle.left}px`,\n      top: `${lineStyle.top}px`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  });\n};\nconst App = () => {\n  const [nodes, setNodes] = useState([{\n    id: 1,\n    label: 'Node 1',\n    position: {\n      x: 100,\n      y: 100\n    },\n    isSelected: false\n  }, {\n    id: 2,\n    label: 'Node 2',\n    position: {\n      x: 300,\n      y: 100\n    },\n    isSelected: false\n  }]);\n  const [edges, setEdges] = useState([]);\n  const [draggingNode, setDraggingNode] = useState(null);\n  const [dragOffset, setDragOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [isAddingEdge, setIsAddingEdge] = useState(false);\n  const [selectedNodes, setSelectedNodes] = useState([]);\n  const graphContainerRef = useRef(null);\n\n  // Start dragging a node\n  const handleNodeDragStart = (e, id) => {\n    setDraggingNode(id);\n    const node = nodes.find(node => node.id === id);\n    if (node) {\n      setDragOffset({\n        x: e.clientX - node.position.x,\n        y: e.clientY - node.position.y\n      });\n    }\n  };\n\n  // Handle dragging a node\n  const handleNodeDragMove = e => {\n    if (draggingNode !== null) {\n      const newX = e.clientX - dragOffset.x;\n      const newY = e.clientY - dragOffset.y;\n      setNodes(prevNodes => prevNodes.map(node => node.id === draggingNode ? {\n        ...node,\n        position: {\n          x: newX,\n          y: newY\n        }\n      } : node));\n    }\n  };\n\n  // Stop dragging a node\n  const handleNodeDragEnd = () => {\n    setDraggingNode(null);\n  };\n\n  // Handle node click to select for edge creation\n  const handleNodeClick = id => {\n    if (isAddingEdge) {\n      if (selectedNodes.length === 0) {\n        setSelectedNodes([id]);\n        setNodes(prevNodes => prevNodes.map(node => node.id === id ? {\n          ...node,\n          isSelected: true\n        } : node));\n      } else if (selectedNodes.length === 1 && selectedNodes[0] !== id) {\n        setSelectedNodes([...selectedNodes, id]);\n        setNodes(prevNodes => prevNodes.map(node => node.id === id ? {\n          ...node,\n          isSelected: true\n        } : node));\n        createEdgeBetweenNodes(selectedNodes[0], id);\n      }\n    }\n  };\n\n  // Create an edge between two selected nodes\n  const createEdgeBetweenNodes = (startNodeId, endNodeId) => {\n    const startNode = nodes.find(node => node.id === startNodeId);\n    const endNode = nodes.find(node => node.id === endNodeId);\n    if (startNode && endNode) {\n      // Calculate the middle point between the two nodes\n      const middleX = (startNode.position.x + endNode.position.x) / 2;\n      const middleY = (startNode.position.y + endNode.position.y) / 2;\n\n      // Add a new node in the middle\n      const newNode = {\n        id: nodes.length + 1,\n        label: `Node ${nodes.length + 1}`,\n        position: {\n          x: middleX,\n          y: middleY\n        },\n        isSelected: false\n      };\n      setNodes([...nodes, newNode]);\n\n      // Add the edge between the two nodes\n      setEdges([...edges, {\n        start: startNode.position,\n        end: endNode.position\n      }]);\n\n      // Reset the selection\n      setSelectedNodes([]);\n      setNodes(prevNodes => prevNodes.map(node => ({\n        ...node,\n        isSelected: false\n      })));\n      setIsAddingEdge(false); // Exit edge creation mode\n    }\n  };\n\n  // Start adding edge mode\n  const startAddingEdge = () => {\n    setIsAddingEdge(true);\n    setSelectedNodes([]);\n    setNodes(prevNodes => prevNodes.map(node => ({\n      ...node,\n      isSelected: false\n    })));\n  };\n\n  // Add a new node\n  const addNode = () => {\n    const newNode = {\n      id: nodes.length + 1,\n      label: `Node ${nodes.length + 1}`,\n      position: {\n        x: Math.random() * 500,\n        y: Math.random() * 500\n      },\n      isSelected: false\n    };\n    setNodes([...nodes, newNode]);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph-editor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startAddingEdge,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }, \"Add Edge\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addNode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }\n  }, \"Add Node\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph-container\",\n    ref: graphContainerRef,\n    onMouseMove: handleNodeDragMove,\n    onMouseUp: handleNodeDragEnd,\n    onMouseLeave: handleNodeDragEnd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }, edges.map((edge, index) => /*#__PURE__*/React.createElement(Edge, {\n    key: index,\n    start: edge.start,\n    end: edge.end,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  })), nodes.map(node => /*#__PURE__*/React.createElement(Node, {\n    key: node.id,\n    id: node.id,\n    label: node.label,\n    position: node.position,\n    onClick: handleNodeClick,\n    isSelected: node.isSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }))));\n};\nexport default App;","map":{"version":3,"names":["React","useState","useRef","Node","id","label","position","onClick","isSelected","createElement","className","style","left","x","top","y","backgroundColor","color","borderRadius","padding","cursor","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Edge","start","end","calculateLine","x1","y1","x2","y2","dx","dy","length","Math","sqrt","angle","atan2","PI","width","transform","lineStyle","height","transformOrigin","App","nodes","setNodes","edges","setEdges","draggingNode","setDraggingNode","dragOffset","setDragOffset","isAddingEdge","setIsAddingEdge","selectedNodes","setSelectedNodes","graphContainerRef","handleNodeDragStart","e","node","find","clientX","clientY","handleNodeDragMove","newX","newY","prevNodes","map","handleNodeDragEnd","handleNodeClick","createEdgeBetweenNodes","startNodeId","endNodeId","startNode","endNode","middleX","middleY","newNode","startAddingEdge","addNode","random","ref","onMouseMove","onMouseUp","onMouseLeave","edge","index","key"],"sources":["C:/Users/anish/Desktop/Anibot/code/DEV/Graph Editor/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './App.css';\r\n\r\nconst Node = ({ id, label, position, onClick, isSelected }) => {\r\n  return (\r\n    <div\r\n      className=\"node\"\r\n      style={{\r\n        left: `${position.x}px`,\r\n        top: `${position.y}px`,\r\n        position: 'absolute',\r\n        backgroundColor: isSelected ? '#FF5733' : '#4CAF50', // Change color if selected\r\n        color: '#fff',\r\n        borderRadius: '10px',\r\n        padding: '10px 20px',\r\n        cursor: 'pointer',\r\n      }}\r\n      onClick={() => onClick(id)}\r\n    >\r\n      {label}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Edge = ({ start, end }) => {\r\n  const calculateLine = (start, end) => {\r\n    const x1 = start.x;\r\n    const y1 = start.y;\r\n    const x2 = end.x;\r\n    const y2 = end.y;\r\n    const dx = x2 - x1;\r\n    const dy = y2 - y1;\r\n    const length = Math.sqrt(dx * dx + dy * dy);\r\n    const angle = Math.atan2(dy, dx) * (180 / Math.PI);\r\n\r\n    return {\r\n      width: length,\r\n      transform: `rotate(${angle}deg)`,\r\n      left: x1,\r\n      top: y1,\r\n    };\r\n  };\r\n\r\n  const lineStyle = calculateLine(start, end);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        width: `${lineStyle.width}px`,\r\n        height: '2px',\r\n        backgroundColor: '#000',\r\n        transformOrigin: '0 0',\r\n        transform: lineStyle.transform,\r\n        left: `${lineStyle.left}px`,\r\n        top: `${lineStyle.top}px`,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  const [nodes, setNodes] = useState([\r\n    { id: 1, label: 'Node 1', position: { x: 100, y: 100 }, isSelected: false },\r\n    { id: 2, label: 'Node 2', position: { x: 300, y: 100 }, isSelected: false },\r\n  ]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [draggingNode, setDraggingNode] = useState(null);\r\n  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });\r\n  const [isAddingEdge, setIsAddingEdge] = useState(false);\r\n  const [selectedNodes, setSelectedNodes] = useState([]);\r\n\r\n  const graphContainerRef = useRef(null);\r\n\r\n  // Start dragging a node\r\n  const handleNodeDragStart = (e, id) => {\r\n    setDraggingNode(id);\r\n    const node = nodes.find((node) => node.id === id);\r\n    if (node) {\r\n      setDragOffset({\r\n        x: e.clientX - node.position.x,\r\n        y: e.clientY - node.position.y,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handle dragging a node\r\n  const handleNodeDragMove = (e) => {\r\n    if (draggingNode !== null) {\r\n      const newX = e.clientX - dragOffset.x;\r\n      const newY = e.clientY - dragOffset.y;\r\n      setNodes((prevNodes) =>\r\n        prevNodes.map((node) =>\r\n          node.id === draggingNode ? { ...node, position: { x: newX, y: newY } } : node\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  // Stop dragging a node\r\n  const handleNodeDragEnd = () => {\r\n    setDraggingNode(null);\r\n  };\r\n\r\n  // Handle node click to select for edge creation\r\n  const handleNodeClick = (id) => {\r\n    if (isAddingEdge) {\r\n      if (selectedNodes.length === 0) {\r\n        setSelectedNodes([id]);\r\n        setNodes((prevNodes) =>\r\n          prevNodes.map((node) =>\r\n            node.id === id ? { ...node, isSelected: true } : node\r\n          )\r\n        );\r\n      } else if (selectedNodes.length === 1 && selectedNodes[0] !== id) {\r\n        setSelectedNodes([...selectedNodes, id]);\r\n        setNodes((prevNodes) =>\r\n          prevNodes.map((node) =>\r\n            node.id === id ? { ...node, isSelected: true } : node\r\n          )\r\n        );\r\n        createEdgeBetweenNodes(selectedNodes[0], id);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Create an edge between two selected nodes\r\n  const createEdgeBetweenNodes = (startNodeId, endNodeId) => {\r\n    const startNode = nodes.find((node) => node.id === startNodeId);\r\n    const endNode = nodes.find((node) => node.id === endNodeId);\r\n\r\n    if (startNode && endNode) {\r\n      // Calculate the middle point between the two nodes\r\n      const middleX = (startNode.position.x + endNode.position.x) / 2;\r\n      const middleY = (startNode.position.y + endNode.position.y) / 2;\r\n\r\n      // Add a new node in the middle\r\n      const newNode = {\r\n        id: nodes.length + 1,\r\n        label: `Node ${nodes.length + 1}`,\r\n        position: { x: middleX, y: middleY },\r\n        isSelected: false,\r\n      };\r\n      setNodes([...nodes, newNode]);\r\n\r\n      // Add the edge between the two nodes\r\n      setEdges([...edges, { start: startNode.position, end: endNode.position }]);\r\n\r\n      // Reset the selection\r\n      setSelectedNodes([]);\r\n      setNodes((prevNodes) =>\r\n        prevNodes.map((node) => ({ ...node, isSelected: false }))\r\n      );\r\n      setIsAddingEdge(false); // Exit edge creation mode\r\n    }\r\n  };\r\n\r\n  // Start adding edge mode\r\n  const startAddingEdge = () => {\r\n    setIsAddingEdge(true);\r\n    setSelectedNodes([]);\r\n    setNodes((prevNodes) =>\r\n      prevNodes.map((node) => ({ ...node, isSelected: false }))\r\n    );\r\n  };\r\n\r\n  // Add a new node\r\n  const addNode = () => {\r\n    const newNode = {\r\n      id: nodes.length + 1,\r\n      label: `Node ${nodes.length + 1}`,\r\n      position: { x: Math.random() * 500, y: Math.random() * 500 },\r\n      isSelected: false,\r\n    };\r\n    setNodes([...nodes, newNode]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-editor\">\r\n      <button onClick={startAddingEdge}>Add Edge</button>\r\n      <button onClick={addNode}>Add Node</button>\r\n      <div\r\n        className=\"graph-container\"\r\n        ref={graphContainerRef}\r\n        onMouseMove={handleNodeDragMove}\r\n        onMouseUp={handleNodeDragEnd}\r\n        onMouseLeave={handleNodeDragEnd}\r\n      >\r\n        {edges.map((edge, index) => (\r\n          <Edge key={index} start={edge.start} end={edge.end} />\r\n        ))}\r\n        {nodes.map((node) => (\r\n          <Node\r\n            key={node.id}\r\n            id={node.id}\r\n            label={node.label}\r\n            position={node.position}\r\n            onClick={handleNodeClick}\r\n            isSelected={node.isSelected}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}