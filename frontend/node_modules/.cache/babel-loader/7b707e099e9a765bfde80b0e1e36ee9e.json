{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anish\\\\Desktop\\\\Anibot\\\\code\\\\DEV\\\\Graph Editor\\\\frontend\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport Node from './components/Node';\nimport Edge from './components/Edge';\nimport './App.css';\nconst App = () => {\n  const [nodes, setNodes] = useState([{\n    id: 1,\n    label: 'Node 1',\n    position: {\n      x: 100,\n      y: 100\n    }\n  }, {\n    id: 2,\n    label: 'Node 2',\n    position: {\n      x: 300,\n      y: 100\n    }\n  }]);\n  const [edges, setEdges] = useState([]);\n  const handleNodeDrag = (e, id) => {\n    const newPosition = {\n      x: e.clientX - 50,\n      y: e.clientY - 25\n    };\n    setNodes(prevNodes => prevNodes.map(node => node.id === id ? {\n      ...node,\n      position: newPosition\n    } : node));\n    // Update edges when nodes move\n    setEdges(prevEdges => prevEdges.map(edge => {\n      if (edge.start.id === id) {\n        return {\n          ...edge,\n          start: {\n            ...edge.start,\n            x: newPosition.x,\n            y: newPosition.y\n          }\n        };\n      }\n      if (edge.end.id === id) {\n        return {\n          ...edge,\n          end: {\n            ...edge.end,\n            x: newPosition.x,\n            y: newPosition.y\n          }\n        };\n      }\n      return edge;\n    }));\n  };\n  const addNode = () => {\n    const newNode = {\n      id: nodes.length + 1,\n      label: `Node ${nodes.length + 1}`,\n      position: {\n        x: Math.random() * 500,\n        y: Math.random() * 500\n      }\n    };\n    setNodes([...nodes, newNode]);\n  };\n  const addEdge = (startNodeId, endNodeId) => {\n    const startNode = nodes.find(node => node.id === startNodeId);\n    const endNode = nodes.find(node => node.id === endNodeId);\n    if (startNode && endNode) {\n      setEdges([...edges, {\n        start: startNode,\n        end: endNode\n      }]);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph-editor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addNode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"Add Node\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => addEdge(1, 2),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, \"Add Edge\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"graph-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, edges.map((edge, index) => /*#__PURE__*/React.createElement(Edge, {\n    key: index,\n    start: edge.start.position,\n    end: edge.end.position,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  })), nodes.map(node => /*#__PURE__*/React.createElement(Node, {\n    key: node.id,\n    id: node.id,\n    label: node.label,\n    position: node.position,\n    onDrag: handleNodeDrag,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }))));\n};\nexport default App;","map":{"version":3,"names":["React","useState","Node","Edge","App","nodes","setNodes","id","label","position","x","y","edges","setEdges","handleNodeDrag","e","newPosition","clientX","clientY","prevNodes","map","node","prevEdges","edge","start","end","addNode","newNode","length","Math","random","addEdge","startNodeId","endNodeId","startNode","find","endNode","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","index","key","onDrag"],"sources":["C:/Users/anish/Desktop/Anibot/code/DEV/Graph Editor/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Node from './components/Node';\r\nimport Edge from './components/Edge';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const [nodes, setNodes] = useState([\r\n    { id: 1, label: 'Node 1', position: { x: 100, y: 100 } },\r\n    { id: 2, label: 'Node 2', position: { x: 300, y: 100 } },\r\n  ]);\r\n\r\n  const [edges, setEdges] = useState([]);\r\n\r\n  const handleNodeDrag = (e, id) => {\r\n    const newPosition = { x: e.clientX - 50, y: e.clientY - 25 };\r\n    setNodes((prevNodes) =>\r\n      prevNodes.map((node) =>\r\n        node.id === id ? { ...node, position: newPosition } : node\r\n      )\r\n    );\r\n    // Update edges when nodes move\r\n    setEdges((prevEdges) =>\r\n      prevEdges.map((edge) => {\r\n        if (edge.start.id === id) {\r\n          return { ...edge, start: { ...edge.start, x: newPosition.x, y: newPosition.y } };\r\n        }\r\n        if (edge.end.id === id) {\r\n          return { ...edge, end: { ...edge.end, x: newPosition.x, y: newPosition.y } };\r\n        }\r\n        return edge;\r\n      })\r\n    );\r\n  };\r\n\r\n  const addNode = () => {\r\n    const newNode = {\r\n      id: nodes.length + 1,\r\n      label: `Node ${nodes.length + 1}`,\r\n      position: { x: Math.random() * 500, y: Math.random() * 500 },\r\n    };\r\n    setNodes([...nodes, newNode]);\r\n  };\r\n\r\n  const addEdge = (startNodeId, endNodeId) => {\r\n    const startNode = nodes.find((node) => node.id === startNodeId);\r\n    const endNode = nodes.find((node) => node.id === endNodeId);\r\n\r\n    if (startNode && endNode) {\r\n      setEdges([\r\n        ...edges,\r\n        { start: startNode, end: endNode },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-editor\">\r\n      <button onClick={addNode}>Add Node</button>\r\n      <button onClick={() => addEdge(1, 2)}>Add Edge</button>\r\n      <div className=\"graph-container\">\r\n        {edges.map((edge, index) => (\r\n          <Edge key={index} start={edge.start.position} end={edge.end.position} />\r\n        ))}\r\n        {nodes.map((node) => (\r\n          <Node\r\n            key={node.id}\r\n            id={node.id}\r\n            label={node.label}\r\n            position={node.position}\r\n            onDrag={handleNodeDrag}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}